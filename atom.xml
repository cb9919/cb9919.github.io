<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不知名小驿站</title>
  
  <subtitle>多读书 多看报 少吃零食 多睡觉</subtitle>
  <link href="http://keyboarder.xyz/atom.xml" rel="self"/>
  
  <link href="http://keyboarder.xyz/"/>
  <updated>2024-03-25T07:56:49.807Z</updated>
  <id>http://keyboarder.xyz/</id>
  
  <author>
    <name>C B</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Plex搭配xTeVe播放IPTV</title>
    <link href="http://keyboarder.xyz/2024/01/09/Plex%E6%90%AD%E9%85%8DxTeVe%E6%92%AD%E6%94%BEIPTV/"/>
    <id>http://keyboarder.xyz/2024/01/09/Plex%E6%90%AD%E9%85%8DxTeVe%E6%92%AD%E6%94%BEIPTV/</id>
    <published>2024-01-09T17:46:06.000Z</published>
    <updated>2024-03-25T07:56:49.807Z</updated>
    
    <content type="html"><![CDATA[<h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><ol><li>使用祖传的AX88179 USB转RJ-45把机顶盒和电脑用网线连起来。</li><li>控制面板，网络适配器里按住ctrl全选AX88179和你的电脑LAN口右键桥接，若一次性桥接不成功，单独右键加入桥接。</li><li>打开wireshark抓AX88179网络的包，然后再机顶盒开机，遥控板进入直播，随便按几下。保存到本地。</li><li>搜索栏输入http，右键追踪http流，搜索igmp，直至找到直播源地址，点一下，自动选中该流。<br><img src="/img/searchhttp.png" alt="searchhttp.png"><br><img src="/img/searchigmp.png" alt="searchigmp.png"></li><li>保存该流数据。<br><img src="/img/saveigmp.png" alt="saveigmp.png"></li><li>使用gcc编译以下源码出来的./a.out整理数据流文件(仅供参考，可能各地区获取的格式并不一样)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;termios.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">#define BOOL int</span><br><span class="line">#define TRUE 1</span><br><span class="line">#define FALSE 0</span><br><span class="line">char * DASH;</span><br><span class="line">char * BUFFER;</span><br><span class="line">FILE * FP;</span><br><span class="line">FILE * FP2;</span><br><span class="line">char PATH[99999][99];</span><br><span class="line">struct termios init_setting;</span><br><span class="line">void my_exit()</span><br><span class="line">&#123;</span><br><span class="line">    tcsetattr(0,TCSANOW,&amp;init_setting);</span><br><span class="line">printf(&quot;\033[?25h\n&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[])&#123;</span><br><span class="line">        if(signal(SIGINT,my_exit) &#x3D;&#x3D; SIG_ERR)&#123;  &#x2F;&#x2F;信号注册函数</span><br><span class="line">    perror(&quot;signal&quot;);</span><br><span class="line">    exit(-1);</span><br><span class="line">      &#125;</span><br><span class="line">atexit(my_exit);</span><br><span class="line">    struct termios new_setting;</span><br><span class="line">    struct termios new_settingback;</span><br><span class="line">    tcgetattr(0,&amp;init_setting);</span><br><span class="line">    &#x2F;&#x2F;tcgetattr(0,&amp;new_settingback);</span><br><span class="line">    new_setting&#x3D;init_setting;</span><br><span class="line">    new_setting.c_cflag&amp;&#x3D;~CREAD;</span><br><span class="line">    new_setting.c_lflag&amp;&#x3D;~ECHO;</span><br><span class="line">    new_setting.c_lflag&amp;&#x3D;~ICANON;</span><br><span class="line">    tcsetattr(0,TCSANOW,&amp;new_setting);</span><br><span class="line"></span><br><span class="line">DASH&#x3D;(char *)malloc(8999999);</span><br><span class="line">BUFFER&#x3D;(char *)malloc(1999999);</span><br><span class="line">int lines;</span><br><span class="line">    char path[39999];</span><br><span class="line">    lines&#x3D;0;</span><br><span class="line">    char Path;</span><br><span class="line">    &#x2F;&#x2F;char txt[999999]; &#x2F;&#x2F;segment error</span><br><span class="line">    char buffer[200];</span><br><span class="line">    int pleng;</span><br><span class="line">    printf(&quot;\r输入文件路径，按回车键结束:\033[K&quot;);</span><br><span class="line">    fflush(stdout);</span><br><span class="line"></span><br><span class="line">        while(TRUE)&#123;</span><br><span class="line">    strcpy(path,&quot;&quot;);</span><br><span class="line">    strcpy(&amp;Path,&quot;&quot;);</span><br><span class="line">    pleng&#x3D;0;</span><br><span class="line">           while((Path&#x3D;getchar())  !&#x3D; &#39;\0&#39;)&#123;</span><br><span class="line">                if(Path &#x3D;&#x3D; &#39;\x7f&#39;)&#123;</span><br><span class="line">                    if(isascii(path[pleng-1]) &amp;&amp; pleng &gt; 0)&#123;</span><br><span class="line">                        path[pleng-1]&#x3D;&#39;\0&#39;;</span><br><span class="line">                        pleng&#x3D;pleng-1;</span><br><span class="line">                        printf(&quot;\b \b&quot;);</span><br><span class="line">                        fflush(stdout);</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if(!isascii(path[pleng-1]) &amp;&amp; pleng &gt; 0)&#123;</span><br><span class="line">                        path[pleng-3]&#x3D;&#39;\0&#39;;</span><br><span class="line">                        path[pleng-2]&#x3D;&#39;\0&#39;;</span><br><span class="line">                        path[pleng-1]&#x3D;&#39;\0&#39;;</span><br><span class="line">                        printf(&quot;\b\b  \b\b&quot;);</span><br><span class="line">                        fflush(stdout);</span><br><span class="line">                        pleng&#x3D;pleng-3;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">           if(Path &#x3D;&#x3D; &#39;\r&#39; || Path &#x3D;&#x3D; &#39;\n&#39; || Path &#x3D;&#x3D; &#39;\0&#39;)&#123;</span><br><span class="line">           break;</span><br><span class="line">        &#125;</span><br><span class="line">            pleng++;</span><br><span class="line">            strncat(path,&amp;Path,1);</span><br><span class="line">            printf(&quot;%c&quot;,Path);</span><br><span class="line">            fflush(stdout);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    strcpy(PATH[0],path);</span><br><span class="line">            fflush(stdout);</span><br><span class="line">                if(strcmp(PATH[0],&quot;&quot;)!&#x3D;0)&#123;</span><br><span class="line">FP &#x3D; fopen(PATH[0], &quot;r+&quot;);</span><br><span class="line">if (FP &#x3D;&#x3D; NULL) &#123; &#x2F;&#x2F; 判断文件是否打开成功tf&quot;); 1;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">            break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">printf(&quot;%s&quot;,PATH[0]);</span><br><span class="line"> FP2 &#x3D; fopen(&quot;iptv.m3u8&quot;, &quot;w+&quot;);</span><br><span class="line">    while (fgets(BUFFER,1999999,FP))&#123;</span><br><span class="line">    strcat(DASH,BUFFER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">int si;</span><br><span class="line">char m3u8[1999999];</span><br><span class="line">char NAME[2999999];</span><br><span class="line">BOOL record&#x3D;FALSE;</span><br><span class="line">BOOL recordNAME&#x3D;FALSE;</span><br><span class="line">for (si&#x3D;0;si&lt;strlen(DASH);si++)&#123;</span><br><span class="line">    if (recordNAME &#x3D;&#x3D; TRUE)&#123;</span><br><span class="line">if (DASH[si]&#x3D;&#x3D;&#39;&quot;&#39;)&#123;</span><br><span class="line">recordNAME&#x3D;FALSE;</span><br><span class="line">printf(&quot;%s &quot;,NAME);</span><br><span class="line">fprintf(FP2,&quot;%s &quot;,NAME);</span><br><span class="line">strcpy(NAME,&quot;&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#125;</span><br><span class="line">    strncat(NAME,&amp;DASH[si],1);</span><br><span class="line">    &#125;</span><br><span class="line">    if (record &#x3D;&#x3D; TRUE)&#123;</span><br><span class="line">if (DASH[si]&#x3D;&#x3D;&#39;|&#39;)&#123;</span><br><span class="line">record&#x3D;FALSE;</span><br><span class="line">printf(&quot;%s\n&quot;,m3u8);</span><br><span class="line">fprintf(FP2,&quot;%s\n&quot;,m3u8);</span><br><span class="line">strcpy(m3u8,&quot;&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">if (DASH[si]&#x3D;&#x3D;&#39;&quot;&#39; )&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">    strncat(m3u8,&amp;DASH[si],1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">if (DASH[si]&#x3D;&#x3D;&#39;&quot;&#39; &amp;&amp; DASH[si-1]&#x3D;&#x3D;&#39;&#x3D;&#39; &amp;&amp; DASH[si-2]&#x3D;&#x3D;&#39;e&#39; &amp;&amp; DASH[si-3]&#x3D;&#x3D;&#39;m&#39; &amp;&amp; DASH[si-4]&#x3D;&#x3D;&#39;a&#39; )&#123;</span><br><span class="line">recordNAME&#x3D;TRUE;</span><br><span class="line">&#125;</span><br><span class="line">if (DASH[si]&#x3D;&#x3D;&#39;&#x3D;&#39; &amp;&amp; DASH[si-1]&#x3D;&#x3D;&#39;L&#39; &amp;&amp; DASH[si-2]&#x3D;&#x3D;&#39;R&#39; &amp;&amp; DASH[si-3]&#x3D;&#x3D;&#39;U&#39; &amp;&amp; DASH[si-4]&#x3D;&#x3D;&#39;l&#39; )&#123;</span><br><span class="line">record&#x3D;TRUE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="openwrt和iptv接入"><a href="#openwrt和iptv接入" class="headerlink" title="openwrt和iptv接入"></a>openwrt和iptv接入</h4></li><li>借助openwrt的udpxy转发，原理不明。。将openwrt和光猫的iptv接入同一路由器配置一下就可以看了。<br><img src="/img/openwrtudpxy.png" alt="openwrtudpxy.png"></li><li>Interface<br><img src="/img/openwrtinterface.png" alt="openwrtinterface.png"></li></ol><ul><li>这里我要提一下，因为openwrt用静态地址一直无法正常联网，多加一个DHCP什么都解决了，但是ip不固定了，所以要从你主路由上为openwrt保留一个静态地址。</li></ul><h4 id="xVeTe"><a href="#xVeTe" class="headerlink" title="xVeTe"></a>xVeTe</h4><ol><li>方法1:完全自制m3u8和匹配的xml文件，能播放，但要显示节目就比较难搞了。我这里提供shell脚本帮助生成。(各地区和用以上c程序生成的内容可能不一样，仅供参考)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#m3u8</span><br><span class="line">a&#x3D;0 \</span><br><span class="line">echo &#39;#EXTM3U&#39; &gt;&gt;.&#x2F;iptv1.m3u8 &amp;&amp;  while read line ;do  </span><br><span class="line">echo &quot;#EXTINF:-1 tvg-id&#x3D;\&quot;$a\&quot;  tvg-name&#x3D;&quot;$(printf &quot;$line&quot; | awk &#39;&#123;printf $1&#125;&#39;)&quot;  ,&quot;$(printf &quot;$line&quot; | awk &#39;&#123;printf $1&#125;&#39;)&quot;&quot; &gt;&gt; .&#x2F;iptv1.m3u8</span><br><span class="line">echo &quot;&quot;$(printf &quot;$line&quot; | awk &#39;&#123;printf $2&#125;&#39;)&quot;&quot; &gt;&gt; .&#x2F;iptv1.m3u8</span><br><span class="line">a&#x3D;$((a+1))</span><br><span class="line">done &lt;&lt;EOF</span><br><span class="line">$(cat &#x2F;Users&#x2F;cb&#x2F;Downloads&#x2F;new.m3u8 )</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#xml 只有匹配作用，没有节目表，可通过检测</span><br><span class="line">a&#x3D;0 \</span><br><span class="line">echo &#39;#EXTM3U&#39; &gt;&gt;.&#x2F;iptv1.m3u8 &amp;&amp;  while read line ;do  </span><br><span class="line">echo &quot;#EXTINF:-1 tvg-id&#x3D;\&quot;$a\&quot;  tvg-name&#x3D;&quot;ChannelName&quot;  ,ChannelName&quot; &gt;&gt; .&#x2F;iptv1.m3u8</span><br><span class="line">echo &quot;$line&quot; &gt;&gt; .&#x2F;iptv1.m3u8</span><br><span class="line">a&#x3D;$((a+1))</span><br><span class="line">done &lt;&lt;EOF</span><br><span class="line">$(cat &#x2F;Users&#x2F;cb&#x2F;Downloads&#x2F;new.m3u8 )</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>以下为最终整理修改出来的m3u8文件模板<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXTINF:-1 tvg-id&#x3D;&quot;1&quot;  tvg-name&#x3D;xxxx高清  ,xxxx高清</span><br><span class="line">http:&#x2F;&#x2F;192.168.2.97:4022&#x2F;udp&#x2F;xxx.xx.xxx.xxx:xxxx</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>方法2:仅生成m3u8文件，然后在Plex使用第三方的EPG频道节目列表(xml)，然后再Plex筛选(注意Plex里频道不能重复，不然一直报错进不去，所以没在这份表上的频道要被舍弃，要不然就要选错误的节目表)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#节目总表:http:&#x2F;&#x2F;epg.51zmt.top:8000&#x2F;e.xml</span><br><span class="line">#央视和各省卫视:http:&#x2F;&#x2F;epg.51zmt.top:8000&#x2F;cc.xml</span><br><span class="line">#地方及数字付费:http:&#x2F;&#x2F;epg.51zmt.top:8000&#x2F;difang.xml</span><br><span class="line"></span><br><span class="line">#详情参考https:&#x2F;&#x2F;github.com&#x2F;supzhang&#x2F;epg 项目</span><br><span class="line">#这里有进阶用法，如果你会的话，可以尝试用该项目获取节目表，然后用方法一喂给xVeTe</span><br></pre></td></tr></table></figure></li><li><p>最优方法(使用<a href="https://github.com/fanmingming/live">https://github.com/fanmingming/live</a> 该项目的m3u8模板和xml信息)</p></li><li><p>下载<a href="https://live.fanmingming.com/tv/m3u/demo.m3u">https://live.fanmingming.com/tv/m3u/demo.m3u</a> ，将直播源链接替换成自己的</p></li><li><p><a href="https://live.fanmingming.com/e.xml">https://live.fanmingming.com/e.xml</a> </p></li><li><p>直接编辑xteve，将<a href="https://live.fanmingming.com/e.xml">https://live.fanmingming.com/e.xml</a> 填入xml，将自己的demo.m3u填入m3u8</p><h4 id="Plex"><a href="#Plex" class="headerlink" title="Plex"></a>Plex</h4></li><li><p>简单设置一下就可以了<br><img src="/img/plex.png" alt="plex.png"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;抓包&quot;&gt;&lt;a href=&quot;#抓包&quot; class=&quot;headerlink&quot; title=&quot;抓包&quot;&gt;&lt;/a&gt;抓包&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;使用祖传的AX88179 USB转RJ-45把机顶盒和电脑用网线连起来。&lt;/li&gt;
&lt;li&gt;控制面板，网络适配器里按住ctrl全</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>安卓使用termux进行chromedriver调试</title>
    <link href="http://keyboarder.xyz/2023/08/31/%E5%AE%89%E5%8D%93%E4%BD%BF%E7%94%A8termux%E8%BF%9B%E8%A1%8Cchromedriver%E8%B0%83%E8%AF%95/"/>
    <id>http://keyboarder.xyz/2023/08/31/%E5%AE%89%E5%8D%93%E4%BD%BF%E7%94%A8termux%E8%BF%9B%E8%A1%8Cchromedriver%E8%B0%83%E8%AF%95/</id>
    <published>2023-08-31T18:40:35.000Z</published>
    <updated>2024-03-25T07:56:49.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Termux"><a href="#Termux" class="headerlink" title="Termux"></a>Termux</h3><ol><li><a href="https://www.bilibili.com/read/cv23532069/">安装ubuntu和远程桌面</a></li></ol><h3 id="为Ubuntu-in-termux添加debian源"><a href="#为Ubuntu-in-termux添加debian源" class="headerlink" title="为Ubuntu in termux添加debian源"></a>为Ubuntu in termux添加debian源</h3><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;debian-stable.list</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deb [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;debian-archive-keyring.gpg] http:&#x2F;&#x2F;deb.debian.org&#x2F;debian stable main </span><br><span class="line">deb-src [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;debian-archive-keyring.gpg] http:&#x2F;&#x2F;deb.debian.org&#x2F;debian stable main </span><br><span class="line">deb [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;debian-archive-keyring.gpg] http:&#x2F;&#x2F;deb.debian.org&#x2F;debian-security&#x2F; stable-security main </span><br><span class="line">deb-src [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;debian-archive-keyring.gpg] http:&#x2F;&#x2F;deb.debian.org&#x2F;debian-security&#x2F; stable-security main </span><br><span class="line">deb [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;debian-archive-keyring.gpg] http:&#x2F;&#x2F;deb.debian.org&#x2F;debian stable-updates main </span><br><span class="line">deb-src [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;debian-archive-keyring.gpg] http:&#x2F;&#x2F;deb.debian.org&#x2F;debian stable-updates main</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update #不要upgrade</span><br><span class="line">apt install -y debian-archive-keyring </span><br></pre></td></tr></table></figure><h3 id="安装chromium"><a href="#安装chromium" class="headerlink" title="安装chromium"></a>安装chromium</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y chromium chromium-driver </span><br></pre></td></tr></table></figure><h3 id="安装python和selenium"><a href="#安装python和selenium" class="headerlink" title="安装python和selenium"></a>安装python和selenium</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install -y python3 python3-pip</span><br><span class="line">pip3 install selenium #如果pip频繁报错，请apt remove python-pip再手动安装</span><br><span class="line">#echo &quot;$(curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;pip&#x2F;get-pip.py)&quot; &gt;.&#x2F;get-pip.py</span><br><span class="line">#python3 .&#x2F;get-pip.py #安装pip </span><br></pre></td></tr></table></figure><h3 id="进行调试"><a href="#进行调试" class="headerlink" title="进行调试"></a>进行调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vncserver :1</span><br><span class="line">chromium --no-sandbox #在VNC桌面的终端内输入 </span><br></pre></td></tr></table></figure>chromedriver文件路径在/usr/bin/chromedriver </li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Termux&quot;&gt;&lt;a href=&quot;#Termux&quot; class=&quot;headerlink&quot; title=&quot;Termux&quot;&gt;&lt;/a&gt;Termux&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/read/cv2353206</summary>
      
    
    
    
    
    <category term="安卓" scheme="http://keyboarder.xyz/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>安卓使用TF卡用作FTP服务器</title>
    <link href="http://keyboarder.xyz/2022/04/26/%E5%AE%89%E5%8D%93-root-%E4%BD%BF%E7%94%A8TF%E5%8D%A1%E7%94%A8%E4%BD%9CFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://keyboarder.xyz/2022/04/26/%E5%AE%89%E5%8D%93-root-%E4%BD%BF%E7%94%A8TF%E5%8D%A1%E7%94%A8%E4%BD%9CFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-04-26T07:21:35.000Z</published>
    <updated>2024-03-25T07:56:49.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>这里我将使用<del>获取root权限的</del>可tf卡扩容的安卓手机和一台安装有infuse的iPad组合，简单介绍一个iPad播放tf卡内的视频资源的教程。</li></ol><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>安卓手机安装termux，termux内使用pkg命令安装pure-ftpd ，并进行配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pkg install pure-ftpd</span><br><span class="line">pure-pw useradd user -u 1001 -g 1001 -d &#x2F;storage&#x2F;*-*&#x2F;(tf卡根目录里想要共享的文件夹，不加也可以)</span><br><span class="line">#建立用户，用户名 user ，用户uid 1001 ，用户gid 1001 ，tf卡目录在&#x2F;storage&#x2F;....&#x2F;或者在&#x2F;sdcard&#x2F;....&#x2F;(找不到用文件浏览器找一下，或者直接使用*-*通配符匹配任意tf卡，推荐用通配符)，这里回车后需要设置密码，输入两遍</span><br><span class="line">pure-pw mkdb</span><br><span class="line">#建立数据库，每次更改完密码都要重建一次数据库</span><br><span class="line">pure-ftpd -B -E -l puredb:$PREFIX&#x2F;etc&#x2F;pureftpd.pdb -S 0.0.0.0,2121</span><br><span class="line">#运行pure-ftpd(-B后台启动，-E不允许空用户登陆，-l数据库路径，-S 绑定的ip,端口)</span><br></pre></td></tr></table></figure></li><li>此时打开安卓手机热点，iPad查看Wi-Fi设置内的手机IP地址，打开infuse添加ftp源。顺利添加的话进行下一步操作。</li><li>因安卓手机每次重启后热点的IP网段就会改变（比如192.168.164.1/24变到192.168.60.1/24），导致infuse之前添加的FTP源无效，再进行以下操作</li><li>安卓termux安装avahi，并配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkg install avahi</span><br><span class="line">avahi-daemon -D</span><br><span class="line">#-D后台运行，默认局域网域名为linux.local</span><br></pre></td></tr></table></figure></li><li>此时打开连着手机热点的iPad，点添加源，会自动识别到linux.local，点进去后简单填写用户名密码端口即可。<br><img src="/img/infuse.jpg" alt="infuse"></li></ol><h3 id="2022年5月2日更新"><a href="#2022年5月2日更新" class="headerlink" title="2022年5月2日更新"></a>2022年5月2日更新</h3><ol><li>发现以上操作根本不需要root权限，只要获取到/storage/下tf卡挂载文件夹的名称，可谓是安卓+iPad用户的一大福音。。</li></ol><h3 id="2022年5月2日更新-1"><a href="#2022年5月2日更新-1" class="headerlink" title="2022年5月2日更新"></a>2022年5月2日更新</h3><ol><li>建议写成.sh文件，或者写入~/.bashrc自启动<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">avahi-daemon -k 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">avahi-daemon -D</span><br><span class="line">killall pure-ftpd 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">pure-ftpd -B -E -l puredb:$PREFIX&#x2F;etc&#x2F;pureftpd.pdb -S 0.0.0.0,21</span><br><span class="line">#若端口冲突，就改一个</span><br></pre></td></tr></table></figure><h3 id="2022年5月16日更新"><a href="#2022年5月16日更新" class="headerlink" title="2022年5月16日更新"></a>2022年5月16日更新</h3></li><li>下载termux后请先在权限设置内打开储存空间，否则读取不到tf卡内容</li></ol><h3 id="2022年5月29日更新"><a href="#2022年5月29日更新" class="headerlink" title="2022年5月29日更新"></a>2022年5月29日更新</h3><ol><li>发现格式化tf卡或者更换新tf卡后，文件夹名称不一样了，但都是xxxx-xxxx，所以可以用*-*这个路径名，匹配所有的tf卡文件夹</li></ol><h4 id="看到这里，就可以愉快的配置使用了"><a href="#看到这里，就可以愉快的配置使用了" class="headerlink" title="看到这里，就可以愉快的配置使用了"></a>看到这里，就可以愉快的配置使用了</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;这里我将使用&lt;del&gt;获取root权限的&lt;/del&gt;可tf卡扩容的安卓手机和一台安装有infuse的iPad组合，简单介绍一个i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在pd虚拟机安装openwrt旁路由</title>
    <link href="http://keyboarder.xyz/2022/02/05/%E5%9C%A8pd%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85openwrt%E6%97%81%E8%B7%AF%E7%94%B1/"/>
    <id>http://keyboarder.xyz/2022/02/05/%E5%9C%A8pd%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85openwrt%E6%97%81%E8%B7%AF%E7%94%B1/</id>
    <published>2022-02-05T21:18:07.000Z</published>
    <updated>2024-03-25T07:56:49.815Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><ol><li>parallels desktop，是一款优秀的虚拟机软件。</li><li>有一台能上网 稳定使用的Mac。</li><li>我的方案暂时是使用外接硬盘启动。所以需要u盘或外接硬盘。</li><li>在局域网内有部分设备需要走旁路由。</li><li>本手段在宿主机运行pd时才可用，也就是需要生效时Mac必须是开机状态。</li><li>走旁路的设备需要支持手动配置网关IP地址。</li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>将从官网下载的openwrt镜像通过etcher刻录进u盘或外接设备。</li><li>pd设置从外界盘启动，有时候识别不到，插在拓展坞就识别出来了。虚拟机开机点击右上的网络选择桥接，无线和有线都可以。注意若外接盘的disk*数字变化，要再在选一次硬盘。</li><li>配置/etc/config/network。今天不想写了，印象中是桥接eth0，然后桥接的br-lan设置静态地址，填一个同网段IP即可。</li><li>配置客户端的网关为br-lan的静态地址</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;parallels desktop，是一款优秀的虚拟机软件。&lt;/li&gt;
&lt;li&gt;有一台能上网 稳定使用的Mac。&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何使用终端学习英语单词</title>
    <link href="http://keyboarder.xyz/2022/01/15/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    <id>http://keyboarder.xyz/2022/01/15/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</id>
    <published>2022-01-15T18:12:10.000Z</published>
    <updated>2024-03-25T07:56:49.815Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ol><li>bash</li><li>手机终端应用(ish termux)或电脑系统终端(Ubuntu, Macos(推荐iTerm+brew install bash), Windows Terminal(WSL))</li></ol><p><img src="/img/BET-ish.gif" alt="BET-ish.gif"> <img src="/img/BET-termux.gif" alt="BET-termux.gif"></p><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><ol><li>IOS下载ish，安卓下载Termux，都是很好用的手机终端app。</li><li>ish<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apk add bash</span><br><span class="line">apk add git</span><br><span class="line">git clone git@github.com:ubun222&#x2F;Bash-English-Training.git</span><br><span class="line">cd Bash-English-Training</span><br><span class="line">bash </span><br><span class="line">.&#x2F;1.9.8.sh -api  # 答题辅助 通关模式 优化ish</span><br></pre></td></tr></table></figure></li><li>Termux<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br><span class="line">git clone git@github.com:ubun222&#x2F;Bash-English-Training.git</span><br><span class="line">cd Bash-English-Training</span><br><span class="line">bash </span><br><span class="line">.&#x2F;1.9.5.sh -ap  # 答题辅助 通关模式</span><br></pre></td></tr></table></figure></li><li>若安装git或bash失败，请先update和upgrade包管理命令。</li><li>json翻译还需要另外安装gawk，可能自带的awk无法使用trans。<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4></li><li>-r 错题集模式</li><li>-R 剔除模式</li><li>-a 辅助答题模式</li><li>-p 通关模式 </li><li>-s 词表验证模式</li><li>-i 优化ish </li><li>-T 优化Termius </li><li>-j 加载.json源文件</li><li>-t 指定txt文件夹名或txt文件夹路径</li><li>-h 获取帮助<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4></li><li>提词机</li><li>完形填空</li><li>四选一<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4></li><li>红黄绿○指示出现时: 按y仅打印详细释义 按Y打印详细释义后跳过; 按v仅打印例句  按V打印例句后跳过; 按S/s跳过; 按回车以继续;</li><li>CTRL+Z 暂停，然后 fg 继续 </li><li>CTRL+C 退出 </li><li>*CTRL+D 查询（非全局适用）</li><li>*TAB键答题提示（非全局适用）</li><li>\\\\\以下的详细部分 定位标识符默认为 除[ae]以外的所有音标 即单词需要以 “word… 音标 …”为中心 例句(v)应在该行以下直至第一个空行，详细释义(y)应在该行以上直至第一个空行。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;手机终端应用(ish termux)或电脑系统终端(Ubuntu, Macos(推荐iTerm+br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Xperia 1 II获取root</title>
    <link href="http://keyboarder.xyz/2022/01/14/Xperia-1-II%E8%8E%B7%E5%8F%96root/"/>
    <id>http://keyboarder.xyz/2022/01/14/Xperia-1-II%E8%8E%B7%E5%8F%96root/</id>
    <published>2022-01-14T19:23:17.000Z</published>
    <updated>2024-03-25T07:56:49.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><img src="/img/sonyroottool.jpg" alt="sonyroottool"></p><h4 id="至少需要一台windows电脑，和一只索尼xperia-1-ii手机，最好有Linux系统，windows的linux子系统就是一个很好的选择，因为Android-Image-Kitchen解包在win有bug，封包两者都没有问题"><a href="#至少需要一台windows电脑，和一只索尼xperia-1-ii手机，最好有Linux系统，windows的linux子系统就是一个很好的选择，因为Android-Image-Kitchen解包在win有bug，封包两者都没有问题" class="headerlink" title="至少需要一台windows电脑，和一只索尼xperia 1 ii手机，最好有Linux系统，windows的linux子系统就是一个很好的选择，因为Android-Image-Kitchen解包在win有bug，封包两者都没有问题"></a>至少需要一台windows电脑，和一只索尼xperia 1 ii手机，最好有Linux系统，windows的linux子系统就是一个很好的选择，因为Android-Image-Kitchen解包在win有bug，封包两者都没有问题</h4><ol><li><a href="https://github.com/topjohnwu/Magisk/releases">magisk</a> ,不多说了，注意从GitHub下载，安卓手机安装，提取后的boot文件需要用这个处理，这里请注意解锁bl会初始化手机所有内容。</li><li>Flashtool-drivers.exe，一款可以用来解锁bl的工具和驱动。</li><li>XperiFirm，索尼手机的固件下载器，下载含有boot文件的整个固件。从网上不难找到。</li><li><a href="https://github.com/Androxyde/Flashtool">Flashtool</a> 专用于索尼xperia 1 ii手机解锁bl和刷入boot的工具</li><li><a href="https://github.com/osm0sis/Android-Image-Kitchen">Android-Image-Kitchen</a>，直接下载仓库即可，用来解压iso固件</li><li>UnSIN，由于索尼手机的固件是.sin后缀格式，需要用这个先转换为.iso。从网上不难找到。</li><li>驱动精灵，不要问为什么要这个</li></ol><h3 id="解锁bootloader"><a href="#解锁bootloader" class="headerlink" title="解锁bootloader"></a>解锁bootloader</h3><ol><li>马克兔需要在<a href="https://developer.sony.com/develop/open-devices/get-started/unlock-bootloader/">官网</a> 获取一串解锁码，记下这串数字</li><li>安装Flashtool-drivers.exe，链接在这里。。链接：<a href="https://pan.baidu.com/s/1YSgW_1sofEox9zfzEXBpOA">https://pan.baidu.com/s/1YSgW_1sofEox9zfzEXBpOA</a> 提取码：sony</li><li>手机关机，数据线连接电脑，马上按住音量+键，当呼吸灯变成蓝色放开，暂时就让手机连着电脑。设备管理器里会发现手机没有驱动。这个时候驱动精灵就派上用场了，扫描一遍后会让你装adb驱动，装完就可以接下来的步骤了(最后的回头路在这里)。</li><li>打开cmd命令行，在c盘找到fastboot文件夹，找到fastboot.exe，按住拖进去命令行。在后面接上 fastboot oem unlock 0x你的解锁码 注意0x后没有空格 </li></ol><h3 id="使用sonyroottool获取固件里的boot，给magisk处理，安卓11还要使用UnSIN和Android-Image-Kitchen解压boot，更改文件内容，最后用Flashtool刷入，注意不是解锁bl的那个"><a href="#使用sonyroottool获取固件里的boot，给magisk处理，安卓11还要使用UnSIN和Android-Image-Kitchen解压boot，更改文件内容，最后用Flashtool刷入，注意不是解锁bl的那个" class="headerlink" title="使用sonyroottool获取固件里的boot，给magisk处理，安卓11还要使用UnSIN和Android-Image-Kitchen解压boot，更改文件内容，最后用Flashtool刷入，注意不是解锁bl的那个"></a>使用sonyroottool获取固件里的boot，给magisk处理，安卓11还要使用UnSIN和Android-Image-Kitchen解压boot，更改文件内容，最后用Flashtool刷入，注意不是解锁bl的那个</h3><ol><li>这部分有一篇很好的教程了。。<br><a href="https://sspai.com/post/68192">传送门</a><br>门门门门门门门门门门门门门门门门门门门门门门门门门门门门<script type="text/javascript">function SetCwinHeight(){var iframeid = document.getElementById("iframeid"); //iframe idif (document.getElementById) { if (iframeid && !window.opera) {   if (iframeid.contentDocument && iframeid.contentDocument.body.offsetHeight) {     iframeid.height = iframeid.contentDocument.body.offsetHeight + 50;   } else if (iframeid.Document && iframeid.Document.body.scrollHeight) {     frameid.height = iframeid.Document.body.scrollHeight + 50;   } }}}</script></li></ol><iframe width="100%" id="iframeid" onload="Javascript:SetCwinHeight()" scrolling="auto"  height="700" frameborder="0" src="https://sspai.com/post/68192"></iframe><h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3><ol><li>除了驱动精灵的驱动，我还没找到网上哪个驱动能打上的…</li><li>Android-Image-Kitchen在win可能解.iso会报错，Linux下就没有这个问题，win用.bat，Linux用.sh。都是拖入终端，后面跟文件路径，</li><li>用Android-Image-Kitchen合成后的boot文件可能只有原来1/2的大小，实测没什么问题。。。应该是某个分区的问题</li><li>安卓11多一步，删除“system_ext”行，不然会无限重启</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/sonyroottool.jpg&quot; alt=&quot;sonyroottool&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;至少需要一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>openwrt部署docker内的plex</title>
    <link href="http://keyboarder.xyz/2021/08/28/openwrt%E9%83%A8%E7%BD%B2docker%E5%86%85%E7%9A%84plex/"/>
    <id>http://keyboarder.xyz/2021/08/28/openwrt%E9%83%A8%E7%BD%B2docker%E5%86%85%E7%9A%84plex/</id>
    <published>2021-08-28T22:30:33.000Z</published>
    <updated>2024-03-25T07:56:49.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ol><li>命令行输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update &amp;&amp; opkg install luci-i18n-dockerman-zh-cn &amp;&amp; opkg install dockerd</span><br></pre></td></tr></table></figure><h2 id="docker内部署plex"><a href="#docker内部署plex" class="headerlink" title="docker内部署plex"></a>docker内部署plex</h2></li><li>命令行输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull plexinc&#x2F;pms-docker ##拉取镜像</span><br><span class="line">##等待拉取完成</span><br></pre></td></tr></table></figure></li><li>命令行配置容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-d \</span><br><span class="line">--name plex \</span><br><span class="line">-p 32400:32400&#x2F;tcp \</span><br><span class="line">-p 3005:3005&#x2F;tcp \</span><br><span class="line">-p 8324:8324&#x2F;tcp \</span><br><span class="line">-p 32469:32469&#x2F;tcp \</span><br><span class="line">-p 1900:1900&#x2F;udp \</span><br><span class="line">-p 32410:32410&#x2F;udp \</span><br><span class="line">-p 32412:32412&#x2F;udp \</span><br><span class="line">-p 32413:32413&#x2F;udp \</span><br><span class="line">-p 32414:32414&#x2F;udp \</span><br><span class="line">-e TZ&#x3D;&quot;Asia&#x2F;Shanghai&quot; \</span><br><span class="line">-e PLEX_CLAIM&#x3D;&quot;claim-xxxxxxxx-xxxxxxxxxxx&quot; \    #从 http:&#x2F;&#x2F;plex.tv&#x2F;claim&#x2F; 获取</span><br><span class="line">-e ADVERTISE_IP&#x3D;&quot;http:&#x2F;&#x2F;192.168.2.1:32400&#x2F;&quot; \    #这个我也不清楚怎么填</span><br><span class="line">-h PlexServer \</span><br><span class="line">-v &#x2F;plex&#x2F;database:&#x2F;config \   #docker与宿主机对应文件夹</span><br><span class="line">-v &#x2F;transcode&#x2F;temp:&#x2F;transcode \    #docker与宿主机对应文件夹</span><br><span class="line">-v &#x2F;media:&#x2F;data \    #docker与宿主机对应文件夹</span><br><span class="line">--device &#x2F;dev&#x2F;dri:&#x2F;dev&#x2F;dri \    #intel核显的解码器路径</span><br><span class="line">--env PLEX_UID&#x3D;0 \      #权限设置，查看宿主机画uid，gid后填入</span><br><span class="line">--env PLEX_GID&#x3D;0 \      #权限设置，核显解码需要root权限</span><br><span class="line">plexinc&#x2F;pms-docker</span><br><span class="line">####复制粘贴注意要将井号后的内容全部删掉####</span><br></pre></td></tr></table></figure></li><li>浏览器访问plex，端口号为32400</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;命令行输入&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>黑果雷电卡DROM修改工具</title>
    <link href="http://keyboarder.xyz/2021/08/22/%E9%BB%91%E6%9E%9C%E9%9B%B7%E7%94%B5%E5%8D%A1DROM%E4%BF%AE%E6%94%B9%E5%B7%A5%E5%85%B7/"/>
    <id>http://keyboarder.xyz/2021/08/22/%E9%BB%91%E6%9E%9C%E9%9B%B7%E7%94%B5%E5%8D%A1DROM%E4%BF%AE%E6%94%B9%E5%B7%A5%E5%85%B7/</id>
    <published>2021-08-22T07:23:14.000Z</published>
    <updated>2024-03-25T07:56:49.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DROM介绍"><a href="#DROM介绍" class="headerlink" title="DROM介绍"></a>DROM介绍</h2><ul><li>DROM是雷电卡固件内的一段数据，一般情况不需要修改，当drom内黑果所需要的IOThunderboltPort*被禁用时，就需要在雷电SSDT内注入并修改数据。</li><li>DROM有验证机制，如果直接对固件的数据进行修改，一是要清楚各个数据段的作用，二是还需要修改drom里的负责验算的两处数据。</li><li>ThunderboltUtil.sh是国外大神制作的一款方便<a href="/img/ThunderboltUtil.sh">修改验算雷电DROM的脚本</a><h3 id="大概的使用方法"><a href="#大概的使用方法" class="headerlink" title="大概的使用方法"></a>大概的使用方法</h3></li><li>命令行先<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ThunderboltUtil.sh</span><br></pre></td></tr></table></figure></li><li>有三种加载DROM的方式</li></ul><ol><li>加载ioreg中的drom: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadioreg</span><br></pre></td></tr></table></figure></li><li>加载雷电固件中的drom: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadfwfile 固件路径</span><br></pre></td></tr></table></figure></li><li>加载雷电ssdt中的drom<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loaddslfile 雷电ssdt路径，asl好像有bug加载不了，需要转换成dsl</span><br></pre></td></tr></table></figure></li></ol><ul><li>选择drom<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usedromnum 1</span><br></pre></td></tr></table></figure></li><li>查看drom<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dumpdrom #会自动验算drom是否正确</span><br><span class="line">or</span><br><span class="line">makedromdsl #ssdt中的格式，也非常易于查看</span><br></pre></td></tr></table></figure></li><li>修改drom<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo $thedrom #然后复制粘贴到文本慢慢改。。。</span><br><span class="line">thedrom&#x3D;修改后的值</span><br><span class="line">dumpdrom #再次查看</span><br><span class="line">makedromdsl #再次查看</span><br></pre></td></tr></table></figure></li><li>使drom验算值正确<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repairchecksums #会自动验算并矫正drom的值，使其能正确加载到系统中</span><br></pre></td></tr></table></figure></li><li>将输出复制粘贴至ssdt正确位置，删掉ssdt内原来的数据大小表示，并保存，会自动生成数据大小<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makedromdsl</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DROM介绍&quot;&gt;&lt;a href=&quot;#DROM介绍&quot; class=&quot;headerlink&quot; title=&quot;DROM介绍&quot;&gt;&lt;/a&gt;DROM介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DROM是雷电卡固件内的一段数据，一般情况不需要修改，当drom内黑果所需要的IOThunder</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nuc8安装openwrt</title>
    <link href="http://keyboarder.xyz/2021/05/30/nuc8%E5%AE%89%E8%A3%85openwrt/"/>
    <id>http://keyboarder.xyz/2021/05/30/nuc8%E5%AE%89%E8%A3%85openwrt/</id>
    <published>2021-05-30T01:09:03.000Z</published>
    <updated>2024-03-25T07:56:49.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><ol start="0"><li>首先按照建议买一根绿联的AX88179芯片的USB转网口数据线，准备硬盘(最新的20.*版openwrt支持了m.2)或者u盘也行。</li><li>从<a href="https://downloads.openwrt.org/releases/">官网</a>找到最新版安装包，ext4格式更容易扩容。<br><img src="https://i.loli.net/2021/05/30/3MZ24vTwgKzuCl6.jpg" alt="安装包.png"></li><li>安装<a href="https://www.balena.io/etcher/">etcher</a></li><li>打开etcher，选择镜像写入硬盘盒或者u盘，安装后接到nuc8后即可启动openwrt</li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol start="0"><li>首先需要vim /etc/config/network，参考如下，是已经配置好了的。wan口(eth0)只负责pppoe拨号，lan口(eth1)设置成静态地址。注：光猫IP地址为192.168.1.1。<br><img src="https://i.loli.net/2021/05/30/LhxSaIXrE5UlG1d.jpg" alt="network.png"></li><li>此时有一个问题，AX88179的eth1还未驱动，若wan口设置正确，pppoe已经成功让openwrt联网，安装驱动命令如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update &amp;&amp; opkg install kmod-usb-net-asix-ax88179</span><br></pre></td></tr></table></figure></li><li>可能的问题有：在成功安装驱动后，wan口却没网了，此时只需进入openwrt的网页管理页面，在菜单栏的network-interface里edit负责pppoe的接口，在防火墙设置里选择wan。<br><img src="https://i.loli.net/2021/05/30/RvqSLDwY1B53AN9.jpg" alt="防火墙.png"></li></ol><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><ol start="0"><li>其实只要用cfdisk在Free space里分出来一个大区，然后必须用mkfs.ext4格式化，再使用挂载点挂载到/overlay，不能是/</li><li>openwrt安装完成后，软件包容量少的可怜，必须扩容，不然装满后有够折腾的。(本节是事后回忆，可能有漏缺)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opkg update &amp;&amp; opkg install fdisk cfdisk #安装用来分区的工具</span><br><span class="line">opkg install block-mount #安装挂载点功能，若没有mkfs,还需要opkg install exfat-mkfs</span><br><span class="line">cfdisk &#x2F;dev&#x2F;nvme0n1 #这是m.2硬盘的情况</span><br><span class="line">cfdisk  #这是u盘的情况</span><br><span class="line"></span><br><span class="line">mkfs.ext4 &#x2F;dev&#x2F;nvme0n1p3 #新的分区需要格式化</span><br></pre></td></tr></table></figure></li><li>分区<br><img src="https://i.loli.net/2021/05/30/X5Hz6JxYMtskuTB.jpg" alt="cfdisk.jpeg"></li><li>挂载</li></ol><h4 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h4><ol><li>若是uefi启动的openwrt，grub里的启动参数文件(主要是硬盘uuid)在efi分区/boot文件夹里。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount &#x2F;dev&#x2F;nvme0n1p1 &#x2F;mnt #首先还需要挂载</span><br><span class="line">vi &#x2F;mnt&#x2F;boot&#x2F;grub&#x2F;grub.cfg #修改gurb配置文件</span><br><span class="line">umount &#x2F;dev&#x2F;nvme0n1p1</span><br></pre></td></tr></table></figure></li><li>fdisk可以删除当前分区，并从通过该分区的start开始扩容该分区。但是，系统所在的分区扩容后无法挂载到/overlay。所以办法只有新建分区再挂载到/overlay的办法。</li><li>安装中文包。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update &amp;&amp; opkg install luci-i18n-base-zh-cn</span><br></pre></td></tr></table></figure></li><li>广告屏蔽软件：<a href="https://github.com/AdguardTeam/AdGuardHome">AdGuard</a>，配置比较难的。</li></ol><h4 id="8月24号更新"><a href="#8月24号更新" class="headerlink" title="8月24号更新"></a>8月24号更新</h4><p>重装发现的问题</p><ol><li>挂载点安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install block-mount</span><br></pre></td></tr></table></figure></li><li>挂载点挂载后需要重启生效</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备安装&quot;&gt;&lt;a href=&quot;#准备安装&quot; class=&quot;headerlink&quot; title=&quot;准备安装&quot;&gt;&lt;/a&gt;准备安装&lt;/h2&gt;&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;首先按照建议买一根绿联的AX88179芯片的USB转网口数据线，准备硬盘(最新的20.*版o</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nuc8黑果篇:实现oc引导下的win冷重启到macOS</title>
    <link href="http://keyboarder.xyz/2021/03/04/nuc8%E9%BB%91%E6%9E%9C%E7%AF%87-%E5%AE%9E%E7%8E%B0oc%E5%BC%95%E5%AF%BC%E4%B8%8B%E7%9A%84win%E5%86%B7%E9%87%8D%E5%90%AF%E5%88%B0macOS/"/>
    <id>http://keyboarder.xyz/2021/03/04/nuc8%E9%BB%91%E6%9E%9C%E7%AF%87-%E5%AE%9E%E7%8E%B0oc%E5%BC%95%E5%AF%BC%E4%B8%8B%E7%9A%84win%E5%86%B7%E9%87%8D%E5%90%AF%E5%88%B0macOS/</id>
    <published>2021-03-04T21:07:57.000Z</published>
    <updated>2024-03-25T07:56:49.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简叙"><a href="#简叙" class="headerlink" title="简叙"></a>简叙</h2><p>使用Boot Camp在win和macOS之间切换，特别是在win热重启(非完全关机再开机)至macOS时，由于该过程中不明原理的蓝牙固件上传失败和itlwm不能正常驱动网卡，出现了蓝牙和Wi-Fi均无法使用的问题。现有一个简单修改oc的config中ACPI-Patch的方法，将系统热重启转变为冷重启，相当于完全关机再开机，那就不会有掉驱动的问题。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li>查看ACPI表中FACP表的内容，找到Reset Register，发现其Address为CF9(方便接下来在hex中查找，若有些OEM厂商设置为其他，那么还需要修改该值), Value to cause reset的值为06。这种情况下只需要修改06为0E，热重启就会变成冷重启。具体原因请参考<a href="https://www.zhihu.com/question/37415635/answer/556868468">这里</a><br><img src="/img/FACP.png" alt="nuc8的FACP表"></li><li>通过FACP表的Raw Table Data或者用hexfriend打开来查找需要被替换的值，并参考如下填入oc的config<br><img src="/img/ACPI-Patch.png" alt="修改config"></li></ol><ul><li>修改前<br><img src="/img/%E4%BF%AE%E6%94%B9%E5%89%8D.png" alt="旧FACP表RAW"></li><li>修改后<br><img src="/img/%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="新FACP表RAW"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简叙&quot;&gt;&lt;a href=&quot;#简叙&quot; class=&quot;headerlink&quot; title=&quot;简叙&quot;&gt;&lt;/a&gt;简叙&lt;/h2&gt;&lt;p&gt;使用Boot Camp在win和macOS之间切换，特别是在win热重启(非完全关机再开机)至macOS时，由于该过程中不明原理的蓝牙固件上</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nuc8黑果篇:使用Airportitlwm驱动AC9560网卡</title>
    <link href="http://keyboarder.xyz/2021/02/13/nuc8%E9%BB%91%E6%9E%9C%E7%AF%87-%E4%BD%BF%E7%94%A8Airportitlwm%E9%A9%B1%E5%8A%A8AC9560%E7%BD%91%E5%8D%A1/"/>
    <id>http://keyboarder.xyz/2021/02/13/nuc8%E9%BB%91%E6%9E%9C%E7%AF%87-%E4%BD%BF%E7%94%A8Airportitlwm%E9%A9%B1%E5%8A%A8AC9560%E7%BD%91%E5%8D%A1/</id>
    <published>2021-02-13T20:33:47.000Z</published>
    <updated>2024-03-25T07:56:49.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>nuc8的网卡为intel的AC9560，在GitHub的itlwm问世之前只能通过更换半免驱网卡来实现无线上网。在购入后一段时间，一直使用InteMausi驱动i219-v，不过后来离路由器非常远，不能满足插网线的条件，就打算使用现成的Airportitlwm.kext。相比itlwm.kext，不再需要heliport辅助显示连接，而是使用了macOS自带的无线网络界面。虽然稳定性和速度略逊一筹，但是极大的提升了使用体验。</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ol><li>二选一iltwm.kext和Airportitlwm。这里使用的是后者。比前者少了最后一步通过heliport提供图形界面。</li><li>安全启动必须开启，所以config中SecureBootModel的值必须被设置，不能为Disabled，比如nuc8使用了Mac mini8,1的机型，查阅oc的使用手册，应该填写j174。</li><li>如果系统版本为Big Sur则不需要在config的kernel-Force栏添加，若系统版本为10.15或10.14以及更低，参考如下填入kernel-Force。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version&#x3D;&quot;1.0&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;BundlePath&lt;&#x2F;key&gt;</span><br><span class="line">&lt;string&gt;System\Library \Extensions \IO80211Family.kext&lt;&#x2F;string&gt;</span><br><span class="line">&lt;key&gt;Comment&lt;&#x2F;key&gt;</span><br><span class="line">&lt;string&gt;force 80211&lt;&#x2F;string&gt;</span><br><span class="line">&lt;key&gt;Enabled&lt;&#x2F;key&gt;</span><br><span class="line">&lt;true&#x2F;&gt;</span><br><span class="line">&lt;key&gt;ExecutablePath&lt;&#x2F;key&gt;</span><br><span class="line">&lt;string&gt;Contents&#x2F;MacOS&#x2F;IO80211Family&lt;&#x2F;string&gt;</span><br><span class="line">&lt;key&gt;PlistPath&lt;&#x2F;key&gt;</span><br><span class="line">&lt;string&gt;Contents&#x2F;Info.plist&lt;&#x2F;string&gt;</span><br><span class="line">&lt;key&gt;Identifier&lt;&#x2F;key&gt;</span><br><span class="line">&lt;string&gt;com.apple.iokit.IO80211Family&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;dict&gt;</span><br><span class="line">&lt;&#x2F;array&gt;</span><br><span class="line">&lt;&#x2F;plist&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>注意config中DmgLoading的值不能为Any，不然在SecureBootModel被设置后oc启动黑屏。改为Signed即可。</li></ol><hr><h2 id="2021-4-3更新"><a href="#2021-4-3更新" class="headerlink" title="2021-4-3更新"></a>2021-4-3更新</h2><ol><li>发现Airportitlwm无法正常隔空播放，更换itlwm和Heliport即可。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;nuc8的网卡为intel的AC9560，在GitHub的itlwm问世之前只能通过更换半免驱网卡来实现无线上网。在购入后一段时间，一直使用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>黑果使用Hackintool定制USB并注入电流属性</title>
    <link href="http://keyboarder.xyz/2021/01/20/%E9%BB%91%E6%9E%9C%E4%BD%BF%E7%94%A8Hackintool%E5%AE%9A%E5%88%B6USB%E5%B9%B6%E6%B3%A8%E5%85%A5%E7%94%B5%E6%B5%81%E5%B1%9E%E6%80%A7/"/>
    <id>http://keyboarder.xyz/2021/01/20/%E9%BB%91%E6%9E%9C%E4%BD%BF%E7%94%A8Hackintool%E5%AE%9A%E5%88%B6USB%E5%B9%B6%E6%B3%A8%E5%85%A5%E7%94%B5%E6%B5%81%E5%B1%9E%E6%80%A7/</id>
    <published>2021-01-20T16:45:48.000Z</published>
    <updated>2024-03-25T07:56:49.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Hackintosh 即黑苹果系统，将macOS安装在其他非苹果的x86平台上，比如<a href="https://github.com/ubun222/Z390GAMINGX-I59600K-VEGA56">我的这套配置</a>。现在一般使用OpenCore引导工具来实现安装和启动，但是能做到稳定运行并不是终点。本人在折腾的过程里，发现在尝试了多次后仍然无法生效iPhone快充，于是翻阅了这片<a href="https://blog.daliansky.net/Intel-FB-Patcher-tutorial-and-insertion-pose.html">文档</a>,重新用Hackintool定制USB端口，该教程十分详细，但是有几个重点需要特别注意。</p><h4 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h4><p>系统版本为10.15.7<br>硬件平台是NUC8i3bek</p><ol><li><p>在注入hackintool生成的空壳驱动后，打开ioreg查找USB端口(HS,SS)的上一级，发现电流属性存在，但是HS和SS的设备属性中没有。</p><ul><li>电流属性 即空壳驱动内的4个kUSB******属性</li></ul></li><li><p>也尝试过使用hackintool一同生成的ssdt文件，都无效。<br>考虑是在定制端口时连接器类型没有选对</p><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4></li><li><p>按照教程重新定制了USB</p></li><li><p>重点在于 和主板上USB3.x插口相关的HS得选USB3.0，虽然HS是USB2.0的端口。</p></li></ol><h2 id="2021-2-27更新"><a href="#2021-2-27更新" class="headerlink" title="2021-2-27更新"></a>2021-2-27更新</h2><ul><li>发现有些主板选择USB2.0也可快充，该方案适用于选择USB2.0无法快充的主板。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Hackintosh 即黑苹果系统，将macOS安装在其他非苹果的x86平台上，比如&lt;a href=&quot;https://github.com/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>修改hosts连接githubraw</title>
    <link href="http://keyboarder.xyz/2021/01/19/%E4%BF%AE%E6%94%B9hosts%E8%BF%9E%E6%8E%A5githubraw/"/>
    <id>http://keyboarder.xyz/2021/01/19/%E4%BF%AE%E6%94%B9hosts%E8%BF%9E%E6%8E%A5githubraw/</id>
    <published>2021-01-19T16:43:53.000Z</published>
    <updated>2024-03-25T07:56:49.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>近日在网上购买了一年的CentOS云服务器，在使用curl到GitHub时遇到如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p>百度一下后据称是DNS被污染，于是我ping raw.githubusercontent.com，将ip写进hosts，但还是报错。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>通过<a href="https://www.ipaddress.com/">该网站</a>查找raw.githubusercontent.com的真实IP</li><li>在/etc/hosts加上这一行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">199.232.96.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>该方法同样适用于我的黑果台式机</li></ol><h3 id="2021-3-1更新"><a href="#2021-3-1更新" class="headerlink" title="2021-3-1更新"></a>2021-3-1更新</h3><p>昨天开始GitHub网页也打不开了，提示无法建立安全连接，git clone也遇到类似的443报错。</p><ul><li>通过<a href="https://www.ipaddress.com/">该网站</a>查找<a href="https://github.com的真实ip/">https://github.com的真实IP</a></li><li>改/etc/hosts<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">140.82.114.3 github.com</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;遇到问题&quot;&gt;&lt;a href=&quot;#遇到问题&quot; class=&quot;headerlink&quot; title=&quot;遇到问题&quot;&gt;&lt;/a&gt;遇到问题&lt;/h3&gt;&lt;p&gt;近日在网上购买了一年的CentOS云服务器，在使用curl到GitHub时遇到如下错误&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>利用GitHub备份和自动化部署hexo</title>
    <link href="http://keyboarder.xyz/2021/01/16/%E5%88%A9%E7%94%A8GitHub%E5%A4%87%E4%BB%BD%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2hexo/"/>
    <id>http://keyboarder.xyz/2021/01/16/%E5%88%A9%E7%94%A8GitHub%E5%A4%87%E4%BB%BD%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2hexo/</id>
    <published>2021-01-16T20:51:39.000Z</published>
    <updated>2024-03-25T07:56:49.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>  在部署好了hexo后，由于上传的静态页面与hexo源文件不同，源文件缺失的情况下，从GitHub上clone下来的网页文件无法重制hexo。</p><h4 id="准备工作-常规部署hexo到public-repo"><a href="#准备工作-常规部署hexo到public-repo" class="headerlink" title="准备工作(常规部署hexo到public repo)"></a>准备工作(常规部署hexo到public repo)</h4><ol><li>在GitHub官网建立一个名为Username.github.io的仓库</li><li>命令行激活仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git push -u https:&#x2F;&#x2F;github.com&#x2F;Username&#x2F;Username.github.io.git main</span><br></pre></td></tr></table></figure></li><li>参考<a href="https://cb9919.github.io/2021/01/09/hexo%E7%AE%80%E5%8D%95%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/">另一篇文章</a>设置好hexo，打开目录内的_config.yml，找到deploy，参考如下填入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;Username:Password@github.com&#x2F;Username&#x2F;Username.github.io.git</span><br><span class="line">  branch: main </span><br></pre></td></tr></table></figure></li><li>测试一下是否能够成功部署<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new helloworld</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="备份源文件-hexo文件夹备份至另一个private-repo"><a href="#备份源文件-hexo文件夹备份至另一个private-repo" class="headerlink" title="备份源文件(hexo文件夹备份至另一个private repo)"></a>备份源文件(hexo文件夹备份至另一个private repo)</h4></li><li>在GitHub官网建立一个backup的私有仓库(本人使用了另外一个GitHub账号建立）</li><li>如上激活仓库</li><li>命令行上传所有hexo文件夹的源文件，因为是pravite库，所以_config.yml中的账号密码不会暴露<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 你的hexo文件夹路径下的所有文件</span><br><span class="line">git commit -m #上传源文件</span><br><span class="line">git push https:&#x2F;&#x2F;github.com&#x2F;Username&#x2F;backup.git main</span><br></pre></td></tr></table></figure></li><li>到此已经做到了hexo d可部署，git push可备份。不是强迫症的已经可以安心使用了。不过就是还有一些小麻烦，每次写完都要git add来备份。所以我打算使用GitHub action，只进行 (git) add commit push的操作，在push到私有库后，云服务器自动安装node.js hexo环境并自动执行clone ,hexo g,hexo d等命令来实现自动化部署</li></ol><hr><h3 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h3><p>开始我尝试了public库来备份，好处是blank.yml内的自动执行git clone不会报错，但问题在于隐私泄漏非常严重，GitHub的账号和密码都被暴露在外。我大部分时间也浪费在了修复这个问题上。但是都没有直接使用private库来的简单粗暴。唯一一个git clone无权限的问题也很好解决。</p><h4 id="编辑-github-workflows-blank-yml"><a href="#编辑-github-workflows-blank-yml" class="headerlink" title="编辑.github/workflows/blank.yml"></a>编辑.github/workflows/blank.yml</h4><ol><li>首先点击action-New workflow-Set up this workflow-Start commit-Commit new file，直接在默认分支里编辑。</li><li>我是两个账户两个仓库，我还得在backup私有库的 repo Settings 里 Manage Access 栏邀请 另一个账户来允许下载备份，因为我在私有库的blank.yml里填的是公有库的账户来git clone，至于为什么不直接用私有库的账号密码来clone，是因为其中一个账户的密码末尾的@导致push时链接无效。</li><li>修改blank.yml，参考用，不能复制粘贴<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line">#只需要在push时触发这个action</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">  runs-on: macos-latest</span><br><span class="line">#运行环境为macOS</span><br><span class="line"></span><br><span class="line">steps:</span><br><span class="line">  - name: install node.js</span><br><span class="line">    uses: actions&#x2F;setup-node@v1</span><br><span class="line">#安装Node.js环境</span><br><span class="line"></span><br><span class="line">- name: Run a multi-line script</span><br><span class="line">  run: |</span><br><span class="line">    npm install hexo-cli -g #安装hexo全局框架</span><br><span class="line">    git clone https:&#x2F;&#x2F;Username:Password@github.com&#x2F;Username&#x2F;backup.git #获取刚刚上传的源文件</span><br><span class="line">    cd backup&#x2F;blog #到达hexo文件夹</span><br><span class="line">    npm install #安装Node.js</span><br><span class="line">    hexo generate #生成静态文件</span><br><span class="line">    hexo deploy #完成上传</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="2021-1-18更新"><a href="#2021-1-18更新" class="headerlink" title="2021-1-18更新"></a>2021-1-18更新</h2><ol><li>在clone到新电脑后，hexo service等命令可能会遇到如下报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Cannot find module &#39;hexo&#39; from &#39;&#x2F;Users&#x2F;cb&#x2F;Desktop&#x2F;github&#x2F;cblog&#x2F;blog&#39;</span><br><span class="line">ERROR Local hexo loading failed in ~&#x2F;Desktop&#x2F;github&#x2F;cblog&#x2F;blog</span><br><span class="line">ERROR Try running: &#39;rm -rf node_modules &amp;&amp; npm install --force&#39;</span><br></pre></td></tr></table></figure>这是因为本地没有该hexo文件夹记录，解决办法就是在hexo文件夹中再次安装node.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 你的hexo博客文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>完成重新安装后，hexo s命令成功运行。hexo d和hexo g待测试。</li><li>hexo d和hexo g均可正常生成静态文件并上传。接下来测试是否能成功运行push到backup仓库后的aciton。</li><li>在本地运行hexo d上传过页面后，仍然支持git push备份以及最主要的backup仓库运行action自动部署网页。<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4>只需要执行npm install重新安装Node.js ， 就可以实现git push后的GitHub Aciton的备份并部署和hexo d常规部署方式</li></ol><h2 id="2021-1-24更新"><a href="#2021-1-24更新" class="headerlink" title="2021-1-24更新"></a>2021-1-24更新</h2><ol><li>由于hexo d是强制上传，若push前没有进行pull补全文章，可能会导致博客内容丢失。</li></ol><h2 id="2021-2-6更新"><a href="#2021-2-6更新" class="headerlink" title="2021-2-6更新"></a>2021-2-6更新</h2><ol><li>从默认主题转换为Butterfly主题，但是在_config.yml中更改theme名后，hexo s本地启动失败，报错一串英文，百度后npm安装如下插件可解决该问题。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure>在另一台电脑上需要重新执行该命令，将backup下载到本地后也会出现一样的hexo s启动失败的报错。</li><li>在Butterfly主题的博客页面中，上一篇，下一篇的默认背景图片在theme的_config.yml中没有找到对应的修改处，所以只能打开Safari开发者工具，而后发现其图片路径名所在的.js文件位于/Butterfly/scripts/filters/random_cover.js这里，删掉其获取默认背景图片的http路径即可，然后发现默认背景图片变成了/Butterfly/source/img/404.jpg这张，将纯色替换这张图片，博客看起来就清爽多了。。。</li><li><a href="https://www.jianshu.com/p/a1a4ebf0e5fc">hexo如何安装Butterfly主题</a></li></ol><h2 id="2021-2-23更新"><a href="#2021-2-23更新" class="headerlink" title="2021-2-23更新"></a>2021-2-23更新</h2><ul><li>安装从DNSPOD白嫖的证书</li></ul><ol><li>编辑nginx.conf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      cert.pem;</span><br><span class="line">    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   html.git&#x2F;;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>下载.key和.crt证书文件，通过百度的在线转换器合成.pem文件，将.key和.pem放入nginx/conf文件夹</li></ol><ul><li>实现自动化部署到云服务器</li></ul><ol><li>服务器搭建git仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx #进入nginx目录(该教程默认为&#x2F;usr&#x2F;local&#x2F;nginx)</span><br><span class="line">git clone --bare https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;xxxx.github.io.git html.git #从github.io复制一个可供Hexo上传的仓库，命名为html.git。</span><br><span class="line">echo &quot;git --work-tree&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html.git --git-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html.git checkout -f&quot; &gt; .&#x2F;html.git&#x2F;hooks&#x2F;post-receive #就是把push到仓库的文件(还在objects中的源代码)转储至html.git内...，</span><br><span class="line">#(仅输入git checkout的命令还有恢复工作树文件的效果)</span><br><span class="line">chmod +x .&#x2F;html.git&#x2F;hooks&#x2F;post-receive #给hooks下的文件添加执行权限</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>因为git要求仓库名后缀为.git，所以只能在nginx/conf/nginx.conf中修改root文件夹为html.git</li><li>修改/blog/_config.yml，添加push给服务器的git仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;cb9919:cb19990614@github.com&#x2F;cb9919&#x2F;cb9919.github.io.git</span><br><span class="line">  branch: main </span><br><span class="line">- type: git</span><br><span class="line">  repo: root@你的服务器IP:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html.git</span><br><span class="line">  branch: main</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>首先在本地macOS电脑中使用ssh-keygen生成一对密钥公钥，并删除~/.ssh/known_hosts，然后打开终端 “ssh 你的服务器ip地址”，会询问是否记录主机 输入yes，会生成一个known_hosts，把密钥和known_hosts文件上传到hexo源代码文件夹根目录下，将.pub后缀的公钥内容写入(重定向)到服务器中的~/.ssh/authorized_keys，再ssh链接测试一下能否不用输入密码，若不用输入密码即算成功。可进行接下来的操作。但是注意接下来只适用于GitHub action选择了macOS环境的情况。<br>修改/.github/workflow/blank.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- name: Run a multi-line script</span><br><span class="line">  run: |</span><br><span class="line">    npm install hexo-cli -g # 安装环境</span><br><span class="line">    git clone https:&#x2F;&#x2F;xxxxx:xxxxx@github.com&#x2F;xxxxx&#x2F;xxxxx.git # 克隆hexo源文件夹</span><br><span class="line">    cp cblog&#x2F;id_rsa ~&#x2F;.ssh&#x2F; # 替换密钥</span><br><span class="line">    chmod 700 ~&#x2F;.ssh&#x2F;id_rsa # 使权限正确</span><br><span class="line">    cp cblog&#x2F;id_rsa.pub ~&#x2F;.ssh&#x2F;</span><br><span class="line">    rm ~&#x2F;.ssh&#x2F;known_hosts #删除以覆盖</span><br><span class="line">    cp cblog&#x2F;known_hosts ~&#x2F;.ssh&#x2F; #添加主机记录，不然还需要输入yes才能继续</span><br><span class="line">    cd cblog&#x2F;blog</span><br><span class="line">    npm install</span><br><span class="line">    hexo generate</span><br><span class="line">    hexo deploy</span><br></pre></td></tr></table></figure></li></ol><h2 id="2021-5-2更新"><a href="#2021-5-2更新" class="headerlink" title="2021-5-2更新"></a>2021-5-2更新</h2><ul><li>添加备案号<br>在blog/themes/Butterfly/layout/includes/footer.pug的theme.footer.copyright下添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;br &#x2F;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;beian.miit.gov.cn&#x2F;&quot;  style&#x3D;&quot;color:black&quot; target&#x3D;&quot;_blank&quot;&gt;浙ICP备xxxxxxxxxx号&lt;&#x2F;a&gt;</span><br><span class="line">&lt;br &#x2F;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;beian.miit.gov.cn&quot;  style&#x3D;&quot;color:black&quot; target&#x3D;&quot;_blank&quot;&gt;信息产业部备案管理系统&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure></li><li>_config.yml中deploy栏下git type的部署方式更换ssh默认的22为2021<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- type: git</span><br><span class="line">  repo: ssh:&#x2F;&#x2F;hostname@xxx.xx.xxx.xxx:2021&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>原：服务器如果默认ssh22端口会有很多登陆请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- type: git</span><br><span class="line">  repo: hostname@xxx.xx.xxx.xxx:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li></ul><h2 id="2021-8-22更新"><a href="#2021-8-22更新" class="headerlink" title="2021-8-22更新"></a>2021-8-22更新</h2><ul><li>github关闭了push的账号密码验证方式<br>所以换用密钥，将id_rsa.pub填入GitHub的setting</li><li>修改hexo的config<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: ssh:&#x2F;&#x2F;git@github.com:22&#x2F;cb9919&#x2F;cb9919.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li></ul><h2 id="2021-12-15更新"><a href="#2021-12-15更新" class="headerlink" title="2021-12-15更新"></a>2021-12-15更新</h2><ul><li>添加了一台新服务器，但是用之前的known_hosts无法通过验证，需要将连接过这台新服务器的Mac电脑中的known_hosts覆盖原文件</li><li><del>同时也需要将id_rsa.pub的后缀改为新服务器的名称</del> &lt;–不需要，请看2022-5-8更新</li></ul><h2 id="2022-1-14更新"><a href="#2022-1-14更新" class="headerlink" title="2022-1-14更新"></a>2022-1-14更新</h2><p><a href="https://certbot.eff.org/instructions?ws=other&os=centosrhel8">ssl证书自动续签</a></p><h2 id="2022-5-8更新"><a href="#2022-5-8更新" class="headerlink" title="2022-5-8更新"></a>2022-5-8更新</h2><p>若ci一直报错hostkey验证错误，编辑/etc/ssh/sshd_config，将StrictModes改为no</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StrictModes no</span><br></pre></td></tr></table></figure><h2 id="2023-6-29更新"><a href="#2023-6-29更新" class="headerlink" title="2023-6-29更新"></a>2023-6-29更新</h2><p>补充部署到自己的云服务器的方法(实测有效)</p><ol><li>以上的方法是将本地(GitHub CI)的公钥.pub写入服务器的authoried_key。</li><li>现在详述一下优化后的过程: 先在云服务器里运行以下代码(这将部署端的.pub记录到部署端的authorized_keys)，然后将云服务器(部署端)的id_rsa密钥下载到本地(GitHub CI)里运行，简单来说就是只用了一对云服务器自己的密钥公钥。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub | ssh user@server &#39;cat &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys&#39; </span><br><span class="line">ssh user@server #测试一下是否能直接不输密码连接自己</span><br></pre></td></tr></table></figure></li><li>仍需要一份known_hosts来过第一次连接时的提示。。。</li><li>注意echo “git –work-tree=/usr/local/nginx/html.git –git-dir=/usr/local/nginx/html.git checkout -f” &gt; ./html.git/hooks/post-receive时，路径名都要跟着改</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;  在部署好了hexo后，由于上传的静态页面与hexo源文件不同，源文件缺失的情况下，从GitHub上clone下来的网页文件无法重制hex</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>macOS使用两个HomePod组成双声道</title>
    <link href="http://keyboarder.xyz/2021/01/10/macOS%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AAHomePod%E7%BB%84%E6%88%90%E5%8F%8C%E5%A3%B0%E9%81%93/"/>
    <id>http://keyboarder.xyz/2021/01/10/macOS%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AAHomePod%E7%BB%84%E6%88%90%E5%8F%8C%E5%A3%B0%E9%81%93/</id>
    <published>2021-01-10T18:33:10.000Z</published>
    <updated>2024-03-25T07:56:49.811Z</updated>
    
    <content type="html"><![CDATA[<h4 id="买了两个HomePod，组合后发现在macOS11-2-1还是分开的"><a href="#买了两个HomePod，组合后发现在macOS11-2-1还是分开的" class="headerlink" title="买了两个HomePod，组合后发现在macOS11.2.1还是分开的"></a>买了两个HomePod，组合后发现在macOS11.2.1还是分开的</h4><p><img src="/img/%E5%8F%8C%E5%A3%B0%E9%81%93.jpg" alt="macOS11.2.1"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>在<em>家庭</em>app中升级并设置组合两个HomePod。</li><li>打开<em>Music</em>，点击隔空播放选项，选择HomePod组合。</li><li>打开<em>音频MIDI设置</em>，右键AirPlay，将此设备用于声音输出。</li><li>播放其他音频。</li></ol><h4 id="2021-3-4更新"><a href="#2021-3-4更新" class="headerlink" title="2021-3-4更新"></a>2021-3-4更新</h4><p>macOS11.3测试版加入了对HomePod组合的支持</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;买了两个HomePod，组合后发现在macOS11-2-1还是分开的&quot;&gt;&lt;a href=&quot;#买了两个HomePod，组合后发现在macOS11-2-1还是分开的&quot; class=&quot;headerlink&quot; title=&quot;买了两个HomePod，组合后发现在macOS1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo简单建站过程</title>
    <link href="http://keyboarder.xyz/2021/01/09/hexo%E7%AE%80%E5%8D%95%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/"/>
    <id>http://keyboarder.xyz/2021/01/09/hexo%E7%AE%80%E5%8D%95%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/</id>
    <published>2021-01-09T23:19:03.000Z</published>
    <updated>2024-03-25T07:56:49.807Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装Node.js<ol><li><a href="http://nodejs.cn/download/">Node.js</a></li><li>终端命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g    #安装全局框架</span><br><span class="line">hexo init blog  #初始化文件夹</span><br><span class="line">cd blog         #进入初始化文件夹</span><br><span class="line">npm install     #安装Node.js</span><br><span class="line">hexo server     #启动服务</span><br></pre></td></tr></table></figure></li></ol></li><li>开始使用<ol><li>编辑./blog/_config.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:******&#x2F;******.github.io.git # ssh和https均可，前提是git设置好</span><br><span class="line">    branch: main</span><br></pre></td></tr></table></figure></li><li>终端命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot; #生成的文章md文件位于.&#x2F;blog&#x2F;source&#x2F;_posts</span><br><span class="line">hexo generate</span><br><span class="line">hexo server -p 端口号</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;安装Node.js&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.cn/download/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;终端命令&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    
  </entry>
  
</feed>
